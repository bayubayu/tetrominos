// (c) 2018 by Bayu Rizaldhan Rayes
// http://www.bayubayu.com

import { assert } from 'chai'
import { Tet } from './tetrominos';

let tet;

beforeEach(function() {
    tet = new Tet();
    tet.init();
})

describe('Logic', function() {
    describe('logic init', function() {
        it('should initialized properly', function() {
            assert.equal(tet._width, 10);
            assert.equal(tet._height, 20);
        });

        it('should accept parameters', function() {
            tet = new Tet({
                width:18,
                height:27
            })
            
            assert.equal(tet._width, 18);
            assert.equal(tet._height, 27);
        });

        it('initial data', function() {
            assert.isArray(tet._landed); 
            let expected = [
                                0,0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0,0,

                                0,0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0,0,
                            ];
            assert.deepEqual(tet._landed, expected);           
            assert.deepEqual(tet.data, expected);     
            
            // no floating
            assert.isTrue(tet.allLanded());

            // prepare L shape
            tet.nextFloatShape('L',0);
            let expectedShape = [
                0,0,0,0,
                0,1,0,0,
                0,1,0,0,
                0,1,1,0,                
            ]
            assert.deepEqual(tet._float, expectedShape);
        });
        

      });
  describe('utilities', function() {
    it('should be correct', function() {
        tet._dataWidth = 6;
        tet._dataHeight = 6;
        tet._landed = [
                        1,2,3,4,5,6,
                        1,2,3,4,5,6,
                        1,2,3,4,5,6,
                        1,2,3,4,5,6,
                        1,2,3,4,5,6,
                        1,2,3,4,5,6,
                    ];
        assert.equal(tet._posToIndex(0,0),0);
        assert.equal(tet._posToIndex(1,2),13);
        assert.equal(tet._posToIndex(5,5),35);
        assert.isNull(tet._posToIndex(7,5));

        assert.equal(tet._getLandedValue(0,0),1);
        assert.equal(tet._getLandedValue(2,5),3);
        assert.equal(tet._getLandedValue(5,5),6);
        assert.isNull(tet._getLandedValue(7,5));        

        tet._setLandedValue(0,0,9)
        tet._setLandedValue(1,2,7)
        assert.equal(tet._getLandedValue(0,0),9);
        assert.equal(tet._getLandedValue(1,2),7);        
    });
  });

  describe('merging', function() {
    it('should be correct', function() {
        tet.nextFloatShape('L',0);
        tet._floatX = 0;
        tet._floatY = 0;
        let expected = [
            0,0,0,0,0,0,0,0,0,0,
            0,1,0,0,0,0,0,0,0,0,
            0,1,0,0,0,0,0,0,0,0,
            0,1,1,0,0,0,0,0,0,0,

            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
        ];
        let newData = tet._placeFloat(0,0);
        tet.data = newData.data;
        assert.equal(tet._floatShape, 'L');
        assert.equal(tet._floatX,0);
        assert.equal(tet._floatY,0);
        assert.deepEqual(tet.data, expected);
    });
  });

  describe('moving', function() {
    it('should be correct', function() {
        let expected = [
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
        ];
        // let newData = tet._placeFloat(0,0);
        assert.deepEqual(tet.data, expected);
        
        // prepare new float shape
        tet.nextFloatShape('L',0);
        // place float shape
        let newData1 = tet._placeFloat(1,1);
        expected = [
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,1,0,0,0,0,0,0,0,
            0,0,1,0,0,0,0,0,0,0,
            
            0,0,1,1,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
        ];
        
        assert.deepEqual(newData1.data, expected);
        assert.equal(newData1.landed, false);

        let newData2 = tet._placeFloat(1,2);        
        expected = [
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,1,0,0,0,0,0,0,0,
            
            0,0,1,0,0,0,0,0,0,0,
            0,0,1,1,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
        ];
        assert.deepEqual(newData2.data, expected);
        assert.equal(newData2.landed, false);

        let newData3 = tet._placeFloat(-1,2);        
        expected = [
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            1,0,0,0,0,0,0,0,0,0,
            
            1,0,0,0,0,0,0,0,0,0,
            1,1,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
        ];
        assert.deepEqual(newData3.data, expected);
        assert.equal(newData3.landed, false);

        let newData4 = tet._placeFloat(-3,2);        
        assert.deepEqual(newData4.data, false);
        assert.equal(newData4.landed, false);
        
        let newData5 = tet._placeFloat(-1,20);        
        expected = [
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            1,0,0,0,0,0,0,0,0,0,
            1,0,0,0,0,0,0,0,0,0,
            1,1,0,0,0,0,0,0,0,0,
        ];
        assert.deepEqual(newData5.data, expected);
        assert.equal(newData5.landed, true);
        
        let newData6 = tet._placeFloat(-1,19);        
        expected = [
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            1,0,0,0,0,0,0,0,0,0,
            1,0,0,0,0,0,0,0,0,0,
            1,1,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
        ];
        assert.deepEqual(newData6.data, expected);
        assert.equal(newData6.landed, false);
    });
  });
  

  describe('game logic', function() {
    it('should return text', function() {
        // assert.equal(tet.data, 'great');
        assert.isArray(tet._landed);
    });
  });
  
});